{"version":3,"sources":["components/SongPlayer/SongPlayer.js","components/Songs/SongListItem/SongListItem.js","components/Songs/Songs.js","components/FixedPlayer/FixedPlayer.js","components/Loading/Loading.js","components/App.js","serviceWorkerRegistration.js","index.js"],"names":["SongPlayer","audioRef","progressRef","song","nextSong","prevSong","handlePlayPause","isPaused","startSetProgressBar","stopSetProgressBar","setProgressBar","progress","addRemoveFromFavourites","audioUrl","cover","title","artist","id","previousIcon","className","aria-hidden","nextIcon","pauseIcon","playIcon","emptyHeart","filledHeart","audioRefCurrentTime","current","Math","floor","currentTime","audioRefDuration","duration","durationInSeconds","currentTimeInSeconds","currentTimeInMinutes","durationInMinutes","includes","JSON","parse","localStorage","getItem","map","item","src","alt","length","onClick","ref","autoPlay","onMouseDown","onMouseMove","onMouseLeave","onMouseUp","style","width","SongListItem","isCurrent","onSelect","setIsPaused","addRemoveFavouritesFromList","currentPlaylist","color","currentPlaylistAll","deleteIcon","play","Songs","songs","currentSong","handleSelectSong","favourites","FixedPlayer","playFavourites","playAll","data","popOut","currentPlaylistFavourites","favouritesClass","allClass","window","scrollTo","Loading","App","useRef","progressRefSongPlayer","progressRefFixedPlayer","onload","autoplay","onbeforeunload","useState","setPopOut","setData","setCurrentPlaylist","setSongs","currentSongIndex","setCurrentSongIndex","progressSongPlayer","setProgressSongPlayer","progressFixedPlayer","setProgressFixedPlayer","slideProgressBar","setSlideProgressBar","progressBarUpdateCurrentTime","setProgressBarUpdateCurrentTime","progressBarUpdateProgress","setProgressBarUpdateProgress","scrollTop","setScrollTop","setFavourites","findSelectedAudioIndex","selectedSong","findIndex","isStorageIncludeSong","addToStorage","songObject","arr","push","setItem","stringify","retrievedObject","removeFromStorage","filtered","filter","el","useEffect","fetch","then","response","ok","json","intervalId","setInterval","clearInterval","ended","handleNextSong","addEventListener","e","scrollTopTarget","target","scrollingElement","undefined","pause","offsetLeft","offsetWidth","clientX","nextAudio","handlePlayPauseSong","handleAddRemoveFavourites","prevAudio","selectedAudioIndex","addToFavourites","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.db01c1f9.chunk.js","sourcesContent":["import './SongPlayer.scss'\r\n\r\nconst SongPlayer = ({ \r\n  audioRef,\r\n  progressRef,\r\n  song, \r\n  nextSong, \r\n  prevSong, \r\n  handlePlayPause, \r\n  isPaused, \r\n  startSetProgressBar,\r\n  stopSetProgressBar,\r\n  setProgressBar,\r\n  progress,\r\n  addRemoveFromFavourites,\r\n  }) => {\r\n  const { audioUrl, cover, title, artist, id } = song\r\n\r\n  const previousIcon = <i className=\"fa fa-step-backward\" aria-hidden=\"true\"></i>\r\n  const nextIcon = <i className=\"fa fa-step-forward\" aria-hidden=\"true\"></i>\r\n  const pauseIcon = <i className=\"fa fa-pause\" aria-hidden=\"true\"></i>\r\n  const playIcon = <i className=\"fa fa-play\" aria-hidden=\"true\"></i>\r\n  const emptyHeart = <i className=\"fa fa-heart-o\" aria-hidden=\"true\"></i>\r\n  const filledHeart = <i className=\"fa fa-heart\" aria-hidden=\"true\"></i>\r\n  \r\n  const audioRefCurrentTime = audioRef.current === null ? \"\" : Math.floor(audioRef.current.currentTime)\r\n  const audioRefDuration = audioRef.current === null ? \"\" : Math.floor(audioRef.current.duration)\r\n\r\n  const durationInSeconds = audioRefDuration%60 || \"0\";\r\n  const currentTimeInSeconds = audioRefCurrentTime%60 || \"0\";\r\n  const currentTimeInMinutes = Math.floor(audioRefCurrentTime/60) || \"0\";\r\n  const durationInMinutes = Math.floor(audioRefDuration/60) || \"0\";\r\n\r\n  const storageSongs = (JSON.parse(localStorage.getItem('favourites')) || []).map(item => (\r\n    item.id))\r\n  const includes = storageSongs.includes(song.id)\r\n  \r\n \r\n  return (\r\n    \r\n    <section className=\"song-player\">\r\n        <img\r\n          className=\"song-player__image\"\r\n          src={cover}\r\n          alt={`${title} cover`} />\r\n      <div className=\"info-wrapper\">\r\n        <div>\r\n        <h2 className={title.length > 25 ? \"song-player__title--if-length\" : \"song-player__title\"}>\r\n          <span className={title.length > 25 ? \"song-player__title--if-length--animation\" : \"\"}>{title}</span>\r\n        </h2>\r\n        <p className=\"song-player__artist\">{artist}</p>\r\n        </div>\r\n        <button className=\"song-player__heart\" onClick={addRemoveFromFavourites}>{includes ? filledHeart : emptyHeart}</button>\r\n      </div>\r\n      <audio ref={audioRef} key={id} autoPlay>\r\n        <source src={audioUrl} />\r\n      </audio>\r\n      <div className=\"progress-bar\">\r\n        <div\r\n          ref={progressRef} \r\n          onClick={setProgressBar}\r\n          onMouseDown={startSetProgressBar}\r\n          onMouseMove={setProgressBar}\r\n          onMouseLeave={stopSetProgressBar} \r\n          onMouseUp={stopSetProgressBar}\r\n          className=\"progress-bar__container\">\r\n          <div style={{width: (progress * 100) + '%'}}></div>\r\n        </div>\r\n      </div>\r\n      <div className=\"timers-wrapper\">\r\n        <span className=\"timers timers--current-time\">{currentTimeInMinutes}:{currentTimeInSeconds < 10 ? `0${currentTimeInSeconds}` : currentTimeInSeconds}</span>\r\n        <span className=\"timers timers--duration\">{durationInMinutes}:{durationInSeconds < 10 ? `0${durationInSeconds}` : durationInSeconds}</span>\r\n      </div>\r\n      <div className=\"song-player__controls\">\r\n        <div className=\"button-wrapper\">\r\n          <button className=\"song-player__button\" onClick={() => prevSong(song)}>{previousIcon}</button>\r\n          <button className=\"song-player__button song-player__button--play\" onClick={handlePlayPause}>{isPaused ? playIcon : pauseIcon}</button>\r\n          <button className=\"song-player__button\" onClick={() => nextSong(song)}>{nextIcon}</button>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default SongPlayer;","import './SongListItem.scss'\r\nconst SongListItem =({ \r\n  song, \r\n  isCurrent, \r\n  onSelect, \r\n  setIsPaused, \r\n  audioRef,\r\n  addRemoveFavouritesFromList,\r\n  currentPlaylist,\r\n}) =>{\r\n\r\n  const color = isCurrent ? \"#009FFD\" : \"#EAF6FF\";\r\n  const style = { color };\r\n  const { cover, title, artist } = song\r\n\r\n  const currentPlaylistAll = currentPlaylist === \"all\"\r\n\r\n  const handlePlayPause = () =>{\r\n    audioRef.current.play();\r\n    setIsPaused(false)\r\n    onSelect(song);\r\n  }\r\n\r\n  const deleteIcon = <i className=\"fa fa-trash-o\" aria-hidden=\"true\"></i>\r\n  const emptyHeart = <i className=\"fa fa-heart-o\" aria-hidden=\"true\"></i>\r\n  const filledHeart = <i className=\"fa fa-heart\" aria-hidden=\"true\"></i>\r\n\r\n  const storageSongs = (JSON.parse(localStorage.getItem('favourites')) || []).map(item => (\r\n    item.id))\r\n  const includes = storageSongs.includes(song.id)\r\n  return (\r\n    <>\r\n    <li className=\"song-list-item\">\r\n      <div onClick={handlePlayPause} >\r\n      <img className=\"song-list-item__image\"src={cover} alt={`${title} cover`}/>\r\n      <div className=\"title-artist-wrapper\">\r\n        <p className=\"song-list-item__title\"style={style}>{title}</p>\r\n        <p className=\"song-list-item__artist\">{artist}</p>\r\n      </div>\r\n      </div>\r\n      <button className=\"song-list-item__icon\" onClick={() => addRemoveFavouritesFromList(song)}>{currentPlaylistAll ? (includes ? filledHeart :emptyHeart) : deleteIcon}</button>\r\n    </li>\r\n    \r\n    </>\r\n  );\r\n}\r\n\r\nexport default SongListItem\r\n","import SongListItem from './SongListItem/SongListItem';\r\nimport './Songs.scss'\r\n\r\nconst Songs = ({ \r\n  songs, \r\n  currentSong, \r\n  handleSelectSong, \r\n  audioRef, \r\n  setIsPaused,\r\n  addRemoveFavouritesFromList,\r\n  favourites,\r\n  currentPlaylist,\r\n}) => {\r\n  \r\n\r\n\r\n  return (\r\n    <section className=\"songs\">\r\n      <h2 className=\"songs__heading\">{currentPlaylist === \"all\" ? \"All songs\" : \"Favourites\"}</h2>\r\n        <ul className=\"songs__list\">\r\n          {songs.length === 0 ? \"dodaj coś\" :\r\n        songs.map(song => (\r\n          <SongListItem\r\n            key={song.id}\r\n            song={song}\r\n            isCurrent={song.audioUrl === currentSong.audioUrl}\r\n            onSelect={handleSelectSong} \r\n            setIsPaused={setIsPaused} \r\n            audioRef={audioRef}\r\n            addRemoveFavouritesFromList={addRemoveFavouritesFromList}\r\n            favourites={favourites}\r\n            currentPlaylist={currentPlaylist}\r\n          />))}\r\n      </ul>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Songs;","import './FixedPlayer.scss'\r\n\r\nconst FixedPlayer = ({\r\n    handlePlayPause, \r\n    isPaused,\r\n    progressRef,\r\n    progress,\r\n    song,\r\n    className,\r\n    addRemoveFromFavourites,\r\n    playFavourites,\r\n    playAll,\r\n    currentPlaylist,\r\n    data,\r\n    favourites,\r\n    popOut,\r\n}) => {\r\n    const { cover, title, artist } = song\r\n\r\n    const pauseIcon = <i className=\"fa fa-pause\" aria-hidden=\"true\"></i>\r\n    const playIcon = <i className=\"fa fa-play\" aria-hidden=\"true\"></i>\r\n    const emptyHeart = <i className=\"fa fa-heart-o\" aria-hidden=\"true\"></i>\r\n    const filledHeart = <i className=\"fa fa-heart\" aria-hidden=\"true\"></i>\r\n\r\n    const currentPlaylistFavourites = currentPlaylist === \"favourites\"\r\n    const currentPlaylistAll = currentPlaylist === \"all\"\r\n    const favouritesClass = currentPlaylistFavourites ? \"playlists__chosen\" : \"playlists__no-chosen\"\r\n    const allClass = currentPlaylistAll ? \"playlists__chosen\" : \"playlists__no-chosen\"\r\n\r\n    const storageSongs = (JSON.parse(localStorage.getItem('favourites')) || []).map(item => (\r\n        item.id))\r\n    const includes = storageSongs.includes(song.id)\r\n    \r\n    return (\r\n        <>\r\n        <div className={`fixed-player ${className}`}>\r\n            <div >\r\n                <div ref={progressRef} className=\"fixed-player__progress-container\" >\r\n                    <div style={{width: (progress * 100) + '%'}}></div>\r\n                </div>\r\n                <img onClick={() => window.scrollTo(0, 0)} className=\"fixed-player__image\" src={cover} alt={`${title} cover`}/>\r\n                <div onClick={() => window.scrollTo(0, 0)} className=\"fixed-player__info\">\r\n                    <h3 className=\"fixed-player__title\">{title}</h3>\r\n                    <p className=\"fixed-player__artist\">{artist}</p>\r\n                </div>\r\n            </div>\r\n                <button className=\"fixed-player__heart\"onClick={addRemoveFromFavourites}>{includes ? filledHeart : emptyHeart}</button>\r\n                <button className=\"fixed-player__button\" onClick={handlePlayPause}>{isPaused ? playIcon : pauseIcon}</button>\r\n            <div className=\"playlists\">\r\n                <button className={allClass} onClick={playAll}>All songs {`(${data.length})`}<span>{currentPlaylistAll ? \"\" : playIcon}</span></button>\r\n                <button className={favouritesClass} onClick={playFavourites}>Favourites {`(${favourites === null ? \"0\" :favourites.length})`}<span>{currentPlaylistFavourites ? \"\" : playIcon}</span></button>\r\n            </div>\r\n        </div>\r\n        {popOut ? <div className=\"pop-out\">Favourites is empty</div> : \"\"}\r\n        </>\r\n    );\r\n}\r\n \r\nexport default FixedPlayer;\r\n","import './Loading.scss'\r\n\r\nconst Loading = () => {\r\n    return ( \r\n        <div className=\"dot\">\r\n            <div className=\"dot__spin\"></div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Loading;","import { useState, useEffect, useRef } from 'react';\r\n\r\n\r\nimport SongPlayer from './SongPlayer/SongPlayer';\r\nimport Songs from './Songs/Songs';\r\nimport FixedPlayer from './FixedPlayer/FixedPlayer'\r\nimport Loading from './Loading/Loading'\r\n\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  const audioRef = useRef(null);\r\n  const progressRefSongPlayer = useRef(null);\r\n  const progressRefFixedPlayer = useRef(null);\r\n  const URL= \"https://music-api-j95.herokuapp.com/songs\";\r\n  // prevent autoplay\r\n  window.onload = function () {\r\n    if(audioRef.current !== null){\r\n    audioRef.current.autoplay = false\r\n    }\r\n  }\r\n  \r\n  //scroll to start\r\n  window.onbeforeunload = function () {\r\n    window.scrollTo(0, 0);\r\n  }\r\n  const [popOut, setPopOut] = useState(false)\r\n  const [data, setData] = useState([]);\r\n  const [currentPlaylist, setCurrentPlaylist] = useState(\"all\");\r\n  const [songs, setSongs] = useState([]);\r\n  const [currentSongIndex, setCurrentSongIndex] = useState(0);\r\n  const currentSong = songs[currentSongIndex];\r\n  const [isPaused, setIsPaused] = useState(true);\r\n  const [progressSongPlayer, setProgressSongPlayer] = useState(0);\r\n  const [progressFixedPlayer, setProgressFixedPlayer] = useState(0);\r\n  const [slideProgressBar, setSlideProgressBar] = useState(false);\r\n  const [progressBarUpdateCurrentTime, setProgressBarUpdateCurrentTime] = useState(false);\r\n  const [progressBarUpdateProgress, setProgressBarUpdateProgress] = useState(false);\r\n  const [scrollTop, setScrollTop] = useState(false);\r\n  const [favourites, setFavourites] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(URL)\r\n    .then(response => {\r\n      if (response.ok){\r\n        response.json()\r\n        .then(data =>{\r\n          setData(data.songs)\r\n          setSongs(data.songs)\r\n        })\r\n      }\r\n    })\r\n  \r\n    const retrievedObject = localStorage.getItem('favourites')\r\n    setFavourites(JSON.parse(retrievedObject))\r\n    if(retrievedObject===null){\r\n      localStorage.setItem('favourites', JSON.stringify([]))\r\n    }\r\n    \r\n  },[])\r\n  \r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      if(audioRef.current !== null) {\r\n        if(isPaused){\r\n          clearInterval(intervalId)\r\n        }\r\n        const { ended } = audioRef.current\r\n        if(ended){\r\n          audioRef.current.currentTime = 0\r\n          handleNextSong(currentSong);\r\n          setProgressSongPlayer(0)\r\n          audioRef.current.play()\r\n          clearInterval(intervalId)\r\n        }\r\n        if(progressBarUpdateProgress !== audioRef.current){\r\n          setProgressBarUpdateProgress(audioRef.current);\r\n          audioRef.current.addEventListener(\"timeupdate\", e =>{\r\n            if(!progressBarUpdateCurrentTime){\r\n              if(audioRef.current !== null){\r\n                const {currentTime, duration} = audioRef.current\r\n                setProgressSongPlayer(currentTime/duration)\r\n                setProgressFixedPlayer(currentTime/duration)\r\n                \r\n              }\r\n            }\r\n          })  \r\n        }\r\n      }\r\n    }, 100);\r\n    return () => clearInterval(intervalId);\r\n    \r\n  },);\r\n\r\n  //show FixedPlayer \r\n  window.addEventListener('scroll',(e) => {\r\n    const scrollTopTarget = e.target.scrollingElement.scrollTop;\r\n    if(scrollTopTarget < 100){\r\n      setScrollTop(false)\r\n    }else if (scrollTopTarget <700){\r\n      setScrollTop(true)\r\n    }\r\n  });\r\n\r\n  \r\n  // if favourites empty back to all songs\r\n  if(favourites !== null){\r\n  if(currentSong === undefined && favourites.length===0 && data.length > 1){\r\n    setSongs(data);\r\n    setCurrentPlaylist(\"all\");\r\n    setProgressSongPlayer(0);\r\n    setProgressFixedPlayer(0);\r\n    if(audioRef.current !== null){\r\n      setIsPaused(true);\r\n      audioRef.current.currentTime = 0;\r\n      audioRef.current.pause();\r\n    }\r\n  }\r\n}\r\n\r\n  // on progressBar click update currentTime to clicked value\r\n  if(progressBarUpdateCurrentTime){\r\n    setProgressBarUpdateCurrentTime(false)\r\n    audioRef.current.currentTime = audioRef.current.duration * progressSongPlayer\r\n  }\r\n\r\n  if(isPaused && audioRef.current !== null){\r\n    audioRef.current.pause();\r\n  }\r\n\r\n  //utilities functions\r\n  function findSelectedAudioIndex(selectedSong, songs){\r\n    const audioIndex = songs.findIndex(\r\n      song => song.audioUrl === selectedSong.audioUrl)\r\n      return audioIndex\r\n  }\r\n\r\n  function isStorageIncludeSong(currentSong){\r\n    const storageSongs = (JSON.parse(localStorage.getItem('favourites')) || []).map(item => (\r\n      item.id))\r\n    const includes = storageSongs.includes(currentSong.id)\r\n    return includes\r\n  }\r\n\r\n  function addToStorage(songObject){\r\n    const arr = JSON.parse(localStorage.getItem('favourites')) || [];\r\n      arr.push({\r\n        artist: songObject.artist,\r\n        audioUrl: songObject.audioUrl,\r\n        cover: songObject.cover,\r\n        id: songObject.id,\r\n        title: songObject.title\r\n      })\r\n      localStorage.setItem('favourites', JSON.stringify(arr))\r\n      const retrievedObject = localStorage.getItem('favourites')\r\n      setFavourites(JSON.parse(retrievedObject))\r\n  }\r\n\r\n  function removeFromStorage(songObject){\r\n    const arr = JSON.parse(localStorage.getItem('favourites')) || [];\r\n      const filtered = arr.filter(el => {\r\n        return el.id !== songObject.id\r\n      })\r\n      localStorage.setItem('favourites', JSON.stringify(filtered))\r\n      const retrievedObject = localStorage.getItem('favourites')\r\n      setFavourites(JSON.parse(retrievedObject))\r\n      if(currentPlaylist === \"favourites\"){\r\n        setSongs(JSON.parse(retrievedObject))\r\n        if(currentSongIndex > 0){\r\n        setCurrentSongIndex(currentSongIndex -1)\r\n      }\r\n      audioRef.current.play()\r\n      }\r\n  }\r\n  //app logic functions\r\n\r\n  const startSetProgressBar = (e) =>{\r\n    setSlideProgressBar(true)\r\n    setProgressBar(e)\r\n  }\r\n\r\n  const stopSetProgressBar = (e) =>{\r\n    setSlideProgressBar(false)\r\n    setProgressBar(e)\r\n  }\r\n\r\n  const setProgressBar = (e) =>{\r\n    if(progressRefSongPlayer !== null){\r\n      if(slideProgressBar){\r\n        const {offsetLeft, offsetWidth} = progressRefSongPlayer.current\r\n      const progress = (e.clientX - offsetLeft) / offsetWidth;\r\n      setProgressSongPlayer(progress)\r\n      setProgressBarUpdateCurrentTime(true);\r\n      }\r\n    }\r\n  }\r\n  const handleSelectSong = (selectedSong) =>{\r\n    const selectedAudioIndex = findSelectedAudioIndex(selectedSong, songs)\r\n    if (selectedAudioIndex >= 0) {\r\n      setCurrentSongIndex(selectedAudioIndex)\r\n      audioRef.current.play();\r\n      setProgressSongPlayer(0);\r\n      setIsPaused(false);\r\n    }\r\n    if(!isPaused){\r\n      audioRef.current.pause();\r\n      setIsPaused(true);\r\n    }\r\n    if(selectedAudioIndex !== currentSongIndex){\r\n      audioRef.current.play();\r\n      setIsPaused(false);\r\n    }\r\n  }\r\n  const handleNextSong =  () =>{\r\n    const nextAudio = currentSongIndex >= songs.length - 1 ? currentSongIndex - songs.length +1: currentSongIndex + 1 \r\n      setCurrentSongIndex(nextAudio);\r\n      setIsPaused(false);\r\n      audioRef.current.currentTime = 0;\r\n      setProgressSongPlayer(0);\r\n  }\r\n\r\n  const handlePrevSong = () =>{\r\n    const prevAudio = currentSongIndex <= 0 ? currentSongIndex + songs.length -1 : currentSongIndex - 1 \r\n    setCurrentSongIndex(prevAudio) \r\n    setIsPaused(false)\r\n  }\r\n\r\n  const handlePlayPauseSong =() =>{\r\n    if(isPaused){\r\n      setIsPaused(false)\r\n      audioRef.current.play()\r\n    }else if(!isPaused){\r\n      setIsPaused(true)\r\n      audioRef.current.pause()\r\n    }\r\n  }\r\n  \r\n  const handleAddRemoveFavourites = () =>{\r\n    const includes = isStorageIncludeSong(currentSong);\r\n    if(!includes){\r\n      addToStorage(currentSong);\r\n    }else{\r\n      removeFromStorage(currentSong)\r\n    }\r\n  }\r\n \r\n  const handleAddRemoveFavouritesFromList = (selectedSong) => {\r\n    const selectedAudioIndex = findSelectedAudioIndex(selectedSong, songs)\r\n    const addToFavourites = songs[selectedAudioIndex]\r\n    \r\n    const includes = isStorageIncludeSong(addToFavourites);\r\n\r\n    if(!includes){\r\n      addToStorage(addToFavourites);\r\n    }else{\r\n      removeFromStorage(addToFavourites)\r\n    }\r\n  }\r\n\r\n  const handlePlayFavourites = () => {\r\n    if(favourites.length > 0){\r\n      setSongs(favourites);\r\n      setCurrentSongIndex(0);\r\n      setIsPaused(true);\r\n      setCurrentPlaylist(\"favourites\");\r\n      setPopOut(false);\r\n      setProgressSongPlayer(0);\r\n      setProgressFixedPlayer(0);\r\n      audioRef.current.currentTime = 0;\r\n    }else {\r\n      setPopOut(true);\r\n    }\r\n  }\r\n\r\n  const handlePlayAll = () => {\r\n    setSongs(data);\r\n    setCurrentSongIndex(0);\r\n    setIsPaused(true);\r\n    setCurrentPlaylist(\"all\");\r\n    setProgressSongPlayer(0);\r\n    setProgressFixedPlayer(0);\r\n    audioRef.current.currentTime = 0;\r\n  } \r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {songs.length === 0 && currentPlaylist === \"all\"\r\n      ? <Loading/>\r\n      :<>\r\n        <h1 className=\"App__heading\">Music player</h1>\r\n        <SongPlayer\r\n          audioRef={audioRef}\r\n          progressRef={progressRefSongPlayer} \r\n          song={currentSong} \r\n          nextSong={handleNextSong}\r\n          prevSong={handlePrevSong}\r\n          handlePlayPause={handlePlayPauseSong}\r\n          isPaused={isPaused}\r\n          startSetProgressBar={startSetProgressBar}\r\n          stopSetProgressBar={stopSetProgressBar}\r\n          setProgressBar={setProgressBar}\r\n          progress={progressSongPlayer}\r\n          addRemoveFromFavourites={handleAddRemoveFavourites}\r\n          favourites={favourites}\r\n          currentPlaylist={currentPlaylist}\r\n          data={data}\r\n          songs={songs}\r\n          setCurrentSongIndex={setCurrentSongIndex}\r\n        />\r\n        <Songs\r\n          audioRef={audioRef} \r\n          songs={songs} \r\n          currentSong={currentSong}\r\n          handleSelectSong={handleSelectSong}\r\n          setIsPaused={setIsPaused}\r\n          song={currentSong}\r\n          addRemoveFavouritesFromList={handleAddRemoveFavouritesFromList}\r\n          favourites={favourites}\r\n          currentPlaylist={currentPlaylist}\r\n          />\r\n        <FixedPlayer\r\n          audioRef={audioRef} \r\n          handlePlayPause={handlePlayPauseSong}\r\n          isPaused={isPaused}\r\n          progressRef={progressRefFixedPlayer}\r\n          progress={progressFixedPlayer}\r\n          song={currentSong} \r\n          className={scrollTop ? \"fixed-player__show\" : \"fixed-player__hide\"}\r\n          addRemoveFromFavourites={handleAddRemoveFavourites}\r\n          playFavourites={handlePlayFavourites}\r\n          playAll={handlePlayAll}\r\n          currentPlaylist={currentPlaylist}\r\n          data={data}\r\n          favourites={favourites}\r\n          popOut={popOut}\r\n        />\r\n      </>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://cra.link/PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then((registration) => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://cra.link/PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then((response) => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log('No internet connection found. App is running in offline mode.');\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then((registration) => {\r\n          registration.unregister();\r\n        })\r\n        .catch((error) => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport 'font-awesome/css/font-awesome.min.css';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();"],"sourceRoot":""}